@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.base/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.base.scheduler
import org.eclipse.emf.ecore.EObject
import ru.neoflex.nfcore.base.types.Timestamp
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.auth.Audit
import org.springframework.scheduling.TaskScheduler
import java.util.concurrent.ScheduledFuture

type Exception wraps java.lang.Exception
type TaskScheduler wraps org.springframework.scheduling.TaskScheduler
type ScheduledFuture wraps java.util.concurrent.ScheduledFuture<?>
type Runnable wraps java.lang.Runnable
type BackOffPolicy wraps org.springframework.retry.backoff.BackOffPolicy
type RetryPolicy wraps org.springframework.retry.RetryPolicy

abstract class BackOffPolicyFactory {
	op BackOffPolicy createPolicy()
}

class NoBackOffPolicyFactory extends BackOffPolicyFactory {
}

class FixedBackOffPolicyFactory extends BackOffPolicyFactory {
    long backOffPeriod
}

class ExponentialBackOffPolicyFactory extends BackOffPolicyFactory {
    long initialInterval
    double multiplier
    long maxInterval
}

class ExponentialRandomBackOffPolicyFactory extends ExponentialBackOffPolicyFactory {
}

class UniformRandomBackOffPolicyFactory extends BackOffPolicyFactory {
    long minBackOffPeriod
    long maxBackOffPeriod
}

abstract class SchedulingPolicy {
	op ScheduledFuture schedule(TaskScheduler taskScheduler, Runnable runnable)
}

class OnceSchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  boolean disableAfterRun
} 

class CronSchedulingPolicy extends SchedulingPolicy {
  String cronExpression
} 

class DelaySchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  long delay
} 

class PeriodSchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  long period
} 

abstract class RetryPolicyFactory {
	op RetryPolicy createPolicy()
}

class RetryableException {
    String exceptionClass
    boolean retryable
}

class SimpleRetryPolicyFactory extends RetryPolicyFactory {
    int maxAttempts
    contains RetryableException[] retryableExceptions
} 

class AlwaysRetryPolicyFactory extends RetryPolicyFactory {
} 

class NeverRetryPolicyFactory extends RetryPolicyFactory {
} 

class TimeoutRetryPolicyFactory extends RetryPolicyFactory {
    long timeout
} 

class Parameter {
	String name
	String value
}

class ScheduledTask {
  QName name
  boolean enabled
  refers EObject eObject
  contains Parameter[] parameters
  Text script
  contains SchedulingPolicy schedulingPolicy
  contains BackOffPolicyFactory backOffPolicyFactory
  contains RetryPolicyFactory retryPolicyFactory
  boolean imporsonate
  String runAsUser
  Password runAsPassword
  Timestamp lastScheduleTime
  Timestamp lastRunTime
  Text lastResult
  Timestamp lastErrorTime
  Text lastError
  contains Audit audit

  op void refreshScheduler() throws Exception
}
