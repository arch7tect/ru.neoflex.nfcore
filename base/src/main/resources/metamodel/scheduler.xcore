@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.base/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.base.scheduler
import org.eclipse.emf.ecore.EObject
import ru.neoflex.nfcore.base.types.Timestamp
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.auth.Audit
import org.springframework.scheduling.TaskScheduler
import java.util.concurrent.ScheduledFuture

type Exception wraps java.lang.Exception
type TaskScheduler wraps org.springframework.scheduling.TaskScheduler
type ScheduledFuture wraps java.util.concurrent.ScheduledFuture
type Runnable wraps java.lang.Runnable

abstract class BackOffPolicy {
}

class NoBackOffPolicy extends BackOffPolicy {
}

class FixedBackOffPolicy extends BackOffPolicy {
    long backOffPeriod
}

class ExponentialBackOffPolicy extends BackOffPolicy {
    long initialInterval
    double multiplier
    long maxInterval
}

class ExponentialRandomBackOffPolicy extends ExponentialBackOffPolicy {
}

class UniformRandomBackOffPolicy extends BackOffPolicy {
    long minBackOffPeriod
    long maxBackOffPeriod
}

abstract class SchedulingPolicy {
	op ScheduledFuture schedule(TaskScheduler taskScheduler, Runnable runnable)
}

class OnceSchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  boolean disableAfterRun
} 

class CronSchedulingPolicy extends SchedulingPolicy {
  String cronExpression
} 

class DelaySchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  long delay
} 

class PeriodSchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  long period
} 

abstract class RetryPolicy {
}

class RetryableException {
    String exceptionClass
    boolean retryable
}

class SimpleRetryPolicy extends RetryPolicy {
    int maxAttempts
    contains RetryableException[] retryableExceptions
} 

class AlwaysRetryPolicy extends RetryPolicy {
} 

class NeverRetryPolicy extends RetryPolicy {
} 

class TimeoutRetryPolicy extends RetryPolicy {
    long timeout
} 

class Parameter {
	String name
	String value
}

class ScheduledTask {
  QName name
  boolean enabled
  refers EObject eObject
  contains Parameter[] parameters
  Text script
  contains SchedulingPolicy schedulingPolicy
  contains BackOffPolicy backOffPolicy
  contains RetryPolicy retryPolicy
  boolean imporsonate
  String runAsUser
  Password runAsPassword
  Timestamp lastScheduleTime
  Timestamp lastRunTime
  Timestamp lastErrorTime
  Text lastError
  contains Audit audit

  op void refreshScheduler() throws Exception
}
