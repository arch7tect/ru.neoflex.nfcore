@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.application/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.application
import ru.neoflex.nfcore.base.types.QName
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import ru.neoflex.nfcore.dataset.DatasetComponent
import ru.neoflex.nfcore.dataset.DatasetColumnView
import ru.neoflex.nfcore.dataset.Dataset
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Color

/* Components */
abstract class Component {
    QName name
}

abstract class ViewComponent {
    contains ViewElement view
}

@Ecore(constraints="IsValid")
class UserComponent extends Component {
    String componentClassName
}

class AppModule {
    QName name
    contains ViewElement view
    contains ToolPanel toolPanel
    contains CatalogNode referenceTree
}

class Application extends AppModule {
}

/* Views */
@Ecore(constraints="IsValid")
abstract class ViewElement {
	String name
	container ViewContainer parent opposite children
}

abstract class ViewContainer extends ViewElement {
	contains ViewElement[] children opposite parent
}

abstract class Icon extends ViewElement {	
}

class ClassFeature extends FormItem {
	refers EStructuralFeature eStructuralFeature
}

@GenModel(documentation="max span value = 24 in one row")
class Column extends ViewContainer {
    String span = "24"
    boolean borderRight
    boolean borderBottom
    boolean borderTop
    boolean borderLeft
}

class ComponentElement extends ViewElement {
	refers Component component
}

class EClassForm extends ViewContainer {
	refers EClass aClass
}

class FAIcon extends Icon {
	String iconCode
}

class Form extends ViewContainer {
}

class FormItem extends ViewContainer {
}

class DatasetView extends ViewElement {
    refers Dataset dataset
    refers DatasetComponent datasetComponent
}

abstract class DataView extends ViewElement {
    refers DatasetView datasetView
}

@Ecore(constraints="IsValid")
class DatasetGridView extends DataView {
    op JSON getDatasetGrids() // для чего?
    RowPerPage rowPerPage = "all"
    contains Highlight[] highlight//При условии таком-то, строки заливаются таким-то цветом
    Theme theme = "Balham"
    boolean showUniqRow//Показывать только уникальные строки
}

class DatasetPivotView extends DataView {
    op JSON getDatasetPivots() // для чего?
}

class DatasetDiagramView extends DataView {
    op JSON getDatasetDiagrams() // для чего?
    //TODO выбор из dataset
    String IndexBy
    String keyColumn
    String valueColumn
    LegendAnchorPositionType legendAnchorPosition
    AxisXPositionType axisXPosition
    String axisXLegend
    AxisYPositionType axisYPosition
    String axisYLegend
    String colorSchema
    DiagramType diagramType
}

class TabsViewReport extends ViewContainer {
    TabPosition tabPosition = "Top"
}

class Tool {
    String name
	contains Icon icon
}

class ToolPanel {
    contains Tool[] tools
}

class Row extends ViewContainer {
    String horizontalGutter = "0"
    String verticalGutter = "0"
    TextAlign textAlign
    String marginRight = "0"
    String marginBottom = "0"
    String marginTop = "0"
    String marginLeft = "0"
}

class Typography extends ViewElement {
    refers TypographyStyle typographyStyle
    TextAlign textAlign
    boolean buttonCopyable
    boolean buttonEditable
    String ellipsisRow = "999"
    boolean codeStyle
    boolean deleteStyle
    boolean disabledStyle
    boolean markStyle
    boolean underlineStyle
    boolean strongStyle
    String marginTop
    String borderBottom
    String fontSize
    String textIndent
    String height
    String fontWeight
    refers GradientStyle gradientStyle
}

class GradientStyle {
    QName name
    Color[] colors
}

class Select extends ViewElement {
    refers EClass ClassToShow
    boolean disabled
    boolean showSearch
    String placeholder
    SelectMode mode = "Default"
    String width = "200"
    String value // заглушка
}

//add TextArea
class Input extends ViewElement {
    InputType inputType = "InputString"
    String minValue = "1"
    String maxValue = "99"
    String value
    String step = "1"
    String placeholder
    String width = "200"
}

class Button extends ViewElement {
    refers ButtonStyle buttonStyle
    boolean buttonCancel
    boolean buttonSave
    boolean backStartPage
    String span = "0"
}

/* Style */
abstract class Style {
    QName name
}

class TypographyStyle extends Style {
    contains Typography typography
}

class ButtonStyle extends Style {
    contains Button button
}

/* Trees */
@Ecore(constraints="IsValid")
abstract class TreeNode {
    String name
}

class AppModuleNode extends TreeNode {
    refers AppModule AppModule
    //refers EObject eObject
}

class CatalogNode extends TreeNode {
    contains TreeNode[] children
}

class DynamicNode extends TreeNode {
    String methodName
    refers EObject eObject
}

class EClassNode extends TreeNode {
    contains ViewElement view
    refers EObject eObject
    refers EClass aClass
}

class ViewNode extends TreeNode {
    contains ViewElement view
    refers EObject eObject
}

class Highlight {
    QName name
    HighlightType highlightType
    Colors backgroundColor
    Colors textColor
    refers DatasetColumnView datasetColumnView
    Operations operation
    String value
}

enum TextAlign {
    Center
    Justify
    Left
    Right
}

enum TabPosition {
    Top
    Right
    Bottom
    Left
}

enum SelectMode {
    Default
    Multiple
    Tags
}

enum InputType {
    InputNumber
    InputString
}

enum RowPerPage {
    one,
    ten,
    twenty,
    fifty,
    oneHundred,
    fiveHundred,
    oneThousand,
    all
}

enum HighlightType {
    Row
    Column
}

enum Theme {
    Balham
    Blue
    Bootstrap
    Fresh
    Material
}

enum Colors {
    Yellow
    Green
    Blue
    Orange
    Red
}

enum Operations {
    EqualTo
    NotEqual
    LessThan
    LessThenOrEqualTo
    GreaterThan
    GreaterThenOrEqualTo
    IsNull
    IsNotNull
    IncludeIn
    NotIncludeIn
}

enum DiagramType {
    Line
    Bar
    Pie
}

enum LegendAnchorPositionType {
    //TODO переименновать с большой буквы
    topLeft
    top
    topRight
    left
    center
    right
    bottomLeft
    bottom
    bottomRight
}

enum AxisXPositionType {
    Top
    Bottom
}

enum AxisYPositionType {
    Left
    Right
}