@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.dataset/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.dataset
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.auth.Audit
import ru.neoflex.nfcore.base.auth.User
import ru.neoflex.nfcore.base.tag.Tagged
import ru.neoflex.nfcore.application.Typography
import ru.neoflex.nfcore.application.GridComponent

/*JdbcDriver*/
@Ecore(constraints="IsValid")
class JdbcDriver {
    QName name
    String driverClassName
	String urlPattern
}

/*JdbcConnection*/
@Ecore(constraints="IsValid")
class JdbcConnection extends Tagged {
    QName name
    refers JdbcDriver driver
    String url
    String userName
    Password password
}

/*Dataset*/
abstract class Dataset extends Tagged {
    QName name
    op JSON deleteAllColumns()
    contains DatasetColumn[] datasetColumn
}

@Ecore(constraints="IsValid")
class JdbcDataset extends Dataset {
    refers JdbcConnection connection
    QueryType queryType
    Text query //тут, так как для каждого dataset своя валидаия
    Text schemaName
    Text tableName
    op JSON showAllTables()
    op JSON loadAllColumns()
    op JSON runQueryDataset(QueryParameter[] parameters)
}

class GroovyDataset extends Dataset {
    op JSON loadAllColumns()
    op JSON runQueryDataset(QueryParameter[] parameters)
    String runQueryGroovyCode
    String loadAllColumnGroovyCode
}

class Pivot {
}

class Diagram {
    String diagramName
    DiagramType diagramType
    String axisXLegend
    String axisYLegend
    AxisXPositionType axisXPosition
    AxisYPositionType axisYPosition
    LegendAnchorPositionType legendAnchorPosition
    String diagramLegend
    String indexBy
    String keyColumn
    String valueColumn
}

/*View*/
@Ecore(constraints="IsValid")
class DatasetComponent extends Tagged {
     QName name //default сделать по умолчанию (не редактируемый)
     refers User owner
     contains Audit audit // createdBy + created(time) + modifiedBy + modified(time)
     Access access //Публичный, закрытый доступ
     op JSON createAllColumns()
     op JSON deleteAllColumns()
     refers Dataset dataset
     contains DatasetColumnView[] column
     op JSON runQuery(QueryParameter[] parameters, QueryFilterDTO[] filters, QueryConditionDTO[] aggregations, QueryConditionDTO[] sorts, QueryFilterDTO[] groupBy, QueryConditionDTO[] calculatedExpression, QueryConditionDTO[] groupByColumn)
     contains QueryParameter[] serverParameters
     boolean useServerFilter
     //Состав серверного фильтра
     contains QueryFilter[] serverFilter
     contains QueryAggregate[] serverAggregation
     contains QuerySort[] serverSort
     contains QueryGroupBy[] serverGroupBy
     contains QueryCalculatedExpression[] serverCalculatedExpression
     contains QueryGroupByColumn[] groupByColumn
     contains Highlight[] highlight
     contains Pivot[] pivot
     contains Diagram[] diagram
     contains HiddenColumn[] hiddenColumn
     contains DMLQuery insertQuery
     contains DMLQuery updateQuery
     contains DMLQuery deleteQuery
     op void executeInsert(QueryParameter[] parameters)
     op void executeUpdate(QueryParameter[] parameters)
     op void executeDelete(QueryParameter[] parameters)
}

class DMLQuery {
    String queryText
    boolean generateFromModel
}

class DatasetColumn {
    String name
    String rdbmsDataType
    DataType convertDataType
}

abstract class DatasetColumnView {
    String name
    contains Typography headerName //название столбца
    boolean hide
    String headerTooltip
    boolean showTooltipField
    Pinned pinned = "Undefined"
    boolean resizable
}

class RdbmsColumn extends DatasetColumnView {
    refers FormatMask formatMask //Формат того, как отображаются данные (два знака после запятой, с точнок, как текст, как число...)
    refers FormatMask excelFormatMask
    String defaultValue //Если пришло значение null, то что отображать в ячейке
    boolean editable
    boolean sortable
    boolean suppressMenu
    boolean isPrimaryKey
    TextAlign textAlign = "Undefined"
    String componentRenderCondition
    contains GridComponent component
    refers DatasetColumn datasetColumn
}

class ColumnGroup extends DatasetColumnView {
    contains DatasetColumnView[] column
}

class FormatMask extends Tagged {
    QName name
    String value
    boolean isDynamic
}

class QueryParameter {
    String parameterName
    String parameterValue
    String parameterDataType = "String"
    //LocalDate format
    String parameterDateFormat = "yyyy-MM-dd"
    //LocalDateTime format
    String parameterTimestampFormat = "yyyy-MM-dd HH:mm:ss"
    boolean isPrimaryKey
}

class QueryFilter {
    String datasetColumn
    Operations operation
    String value
    boolean enable
}

class QueryAggregate {
    String datasetColumn
    Aggregate operation
    boolean enable
}

class QuerySort {
    String datasetColumn
    Sort operation
    boolean enable
}

class QueryGroupBy {
    String datasetColumn
    Aggregate operation
    boolean enable
    String value
}

class QueryGroupByColumn {
    String datasetColumn
    boolean enable
}

class QueryCalculatedExpression {
    String datasetColumn
    String operation
    String dataType
    String mask
    boolean enable
}

class HiddenColumn {
    String datasetColumn
    boolean enable
}

class QueryConditionDTO {
    String datasetColumn
    String operation
    boolean enable
}

class QueryFilterDTO extends QueryConditionDTO {
    String value
}

class Highlight {
    HighlightType highlightType
    String datasetColumn
    Operations operation
    String value
    boolean enable
    String backgroundColor
    String color
}

enum QueryType {
    UseTableName
    UseQuery
}

enum Operations {
    EqualTo
    NotEqual
    LessThan
    LessThenOrEqualTo
    GreaterThan
    GreaterThanOrEqualTo
    IsEmpty
    IsNotEmpty
    IncludeIn
    NotIncludeIn
    StartWith
    NotStartWith
    EndOn
    NotEndOn
}

enum Aggregate {
    Average
    Count
    CountDistinct
    Maximum
    Minimum
    Sum
}

enum Sort {
    FromAtoZ
    FromZtoA
}

enum Access {
    Public
    Private
    Default
}

enum Filter {
    TextColumnFilter
    NumberColumnFilter
    DateColumnFilter
}

enum Pinned {
    Undefined
    Left
    Right
}

enum TextAlign {
    Undefined
    Left
    Right
    Center
}

enum DataType {
    Undefined
    Boolean
    Date
    Decimal
    Integer
    String
    Timestamp
}

enum HighlightType {
    Cell
    Column
    Row
}

enum DiagramType {
    Line
    Bar
    Pie
}

enum LegendAnchorPositionType {
    TopLeft
    Top
    TopRight
    Left
    Center
    Right
    BottomLeft
    Bottom
    BottomRight
}

enum AxisXPositionType {
    Top
    Bottom
}

enum AxisYPositionType {
    Left
    Right
}

enum CalculatorFunction {
    abs as "abs(<column>)"
    mod as "mod(<column1>,<column2>)"
    power as "power(<column>,<expression>)"
    sqrt as "sqrt(<column>)"
    ascii as "ascii(<column>)"
    pi as "pi()"
    exp as "exp(<column>)"
    sign as "sign(<column>)"
    cos as "cos(<column>)"
    sin as "sin(<column>)"
    tan as "tan(<column>)"
    acos as "acos(<column>)"
    asin as "asin(<column>)"
    atan as "atan(<column>)"
    log10 as "log10(<column>)"
    ceiling as "ceiling(<column>)"
    floor as "floor(<column>)"
    coalesce as "coalesce(<column1>,<column2>,<columnN>)"
    concat as "concat(<column1>,<column2>)"
    curdate as "curdate()"
    curtime as "curtime()"
    year as "year(<column>)"
    month as "month(<column>)"
    day as "day(<column>)"
    hour as "hour(<column>)"
    minute as "minute(<column>)"
    second as "second(<column>)"
    nullif as "nullif(<column>,<expression>)"
    ltrim as "ltrim(<column>,<expression>)"
    rtrim as "rtrim(<column>,<expression>)"
    replace as "replace(<column>,<replacee>,<replacement>)"
    substring as "substring(<column>,<start>,<end>)"
    lower as "lower(<column>)"
    upper as "upper(<column>)"
    length as "length(<column>)"
    to_date as "to_date(<column>,?<format>)"
    to_char as "to_char(<column>,?<format>)"
    to_number as "to_number(<column>,?<format>)"
    case_ as "case"
    when_ as "when"
    then_ as "then"
    end_ as "end"
    and_ as "and"
    or_ as "or"
    notEqual as  "!="
    equal as  "="
    greater as ">"
    lesser as "<"
    greaterEqual as ">="
    lesserEqual as "<="
}

enum DMLQueryType {
    Insert,
    Update,
    Delete
}
