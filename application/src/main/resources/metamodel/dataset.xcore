@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.datasource/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.dataset
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.types.Date

/*JdbcDriver*/
@Ecore(constraints="IsValid")
class JdbcDriver {
    QName name
    String driverClassName
	String[] extLibraries /*доп. jar файлы*/
	String urlPattern
}

/*JdbcConnection*/
@Ecore(constraints="IsValid")
class JdbcConnection {
    QName name
    refers JdbcDriver driver
    String url
    String userName
    Password password
}

/*Dataset*/
@Ecore(constraints="IsValid")
class JdbcDataset {
    QName name
    op JSON runQuery()
    refers JdbcConnection connection
    Text query
    contains DatasetColumn[] datasetColumn
    contains AppDatasetView[] view
}

class AppDatasetView {
    String name
    refers DatasetView datasetView
}

/*View*/
class DatasetView {
    //при запуске runQuery начитывать колонки в массив с мапами. Не в деволтной версии, если меняется порядок, то сохраняем его тут
    contains DatasetColumnView[] column
    QName name //default сделать по умолчанию (не редактируемый)
    String rowCount//сколько строк показывать (выбрать из списка)
    String markRow //При условии таком-то, строки заливаются таким-то цветом
    Access access //Публичный, закрытый доступ
    String owner //Не редактируемое поле. Создатель вью
    Theme theme //Выбранная тема грида
    Date date //дата на которую подгружается отчет
}
/*
class AppDatasetColumn {
    String name
    refers DatasetColumn datasetColumn
}
*/

class DatasetColumn {  //не редактирумый класс, информативный. Отвечает на вопрос: что пришло с сервера?
    String rdbmsFieldName //название поля с сервера
    String rdbmsDataType //тип, который приходит с сервера (не измененный)
    //сопоставляет пришедший тип из базы со списком доступных DataType в enum и показывает возможные варианты
    //Например: все поля могут быть стринг + универсальный тип (дата, время, число)
    DataType convertDataType
    }

//Количество столбцов в DatasetColumn в JdbcDataset (пришедшее с сервера),
//должно быть равно количеству столбцов во вью. Если нет, то писать каких не хватает и ошибка
class DatasetColumnView {
    String headerName //название столбца
    //тип столбца в grid. Валидация: Если он входит в перечень допустимых типов в convertDataType, то ОК
    DataType gridDataType
    String headerTooltip //всплывающая подсказка
    boolean hide //скрытый ли столбец. По умолчанию false
    Pinned pinned //зафиксированный ли столбец (слева, справа)
    boolean calculatedColumn //вычисляемый столбец
    String calculatedExpression //выражение в вычисляемом столбце
    Filter filter //выбор типа фильтра. Зависит от типа данных, но можно изменить.
    String filterExpression //выражение в фильтре
    Sort sort //тип сортировки
    String defaultValue //Если пришло значение null, то что отображать в ячейке
    Aggregate aggregate //Посчитать столбец (сумму, количество, вычислить максимальное значение)
    boolean GroupBy //Группировать по этому стобцу или нет
}

enum Theme {
    balham
    material
    fresh
    blue
    bootstrap
}

enum Aggregate {
    undefined
    sum
    average
    count
    countDistinct
    minimum
    maximum
    median
}

enum Sort {
    undefined
    from_A_to_Z
    from_Z_to_A
}

enum Access {
    public //A Number Filter for number comparisons.
    private //A Text Filter for string comparisons.
}

enum Filter {
    agTextColumnFilter //A Text Filter for string comparisons.
    agNumberColumnFilter //A Number Filter for number comparisons.
    agDateColumnFilter //A Date Filter for date comparisons.
}

enum Pinned {
    undefined
    left
    right
}

enum DataType {
    undefined
    string
    boolean
    date
    timestamp
    integer
    decimal
}

/*NOT USE*/

class ColumnValue {
	refers DatasetColumn[1] column
	String value
}

class Row {
	contains ColumnValue[] values
}
