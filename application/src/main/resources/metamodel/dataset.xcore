@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.dataset/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.dataset
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.auth.Audit
import ru.neoflex.nfcore.base.auth.User
import ru.neoflex.nfcore.base.tag.Tagged
import ru.neoflex.nfcore.application.Typography
import ru.neoflex.nfcore.application.GridComponent

annotation "ru.neoflex.nfcore" as NFCore

/*JdbcDriver*/
@NFCore(documentation="Jdbc драйвер")
@Ecore(constraints="IsValid")
class JdbcDriver extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Название драйвера. Например: 'JdbcDriverPostgresqlTest'")
    String driverClassName
        @NFCore(documentation="Ссылки на файлы с драйверами")
    String[] extLibraries
        @NFCore(documentation="Шаблон URL")
	String urlPattern
}

/*JdbcConnection*/
@NFCore(documentation="Подключение к Базе данных")
@Ecore(constraints="IsValid")
class JdbcConnection extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Jdbc драйвер")
    refers JdbcDriver driver
        @NFCore(documentation="Путь к Базе данных. Например: 'jdbc:postgresql://NRStudio-Master.neoflex.ru:5432/nrtest'", expandable="true")
    String url
        @NFCore(documentation="Логин от Базы данных")
    String userName
        @NFCore(documentation="Пароль от Базы данных")
    Password password
        @NFCore(documentation="Проверить запрос к Базе данных")
    op JSON testConnection()
}

/*Dataset*/
@NFCore(documentation="Набор данных (таблица)")
abstract class Dataset extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Список со всеми колонками в наборе данных")
    contains DatasetColumn[] datasetColumn
        @NFCore(documentation="Удаление всех колонок из Набора данных")
    op JSON deleteAllColumns()
}

@NFCore(documentation="Набор данных, подключаемый из Базы данных через Jdbc")
@Ecore(constraints="IsValid")
class JdbcDataset extends Dataset {
        @NFCore(documentation="Подключение к Базе данных")
    refers JdbcConnection connection
        @NFCore(documentation="Формат формирования запроса. Возможные значение: UseTableName - используя только имя таблицы и схему, UseQuery - используя только сам запрос")
    QueryType queryType
        @NFCore(documentation="Запрос к Базе данных", expandable="true")
    Text query
        @NFCore(documentation="Схема для запроса к Базе данных")
    Text schemaName
         @NFCore(documentation="Название таблицы для запроса к Базе данных")
    Text tableName
        @NFCore(documentation="Вывести на экран все таблицы")
    op JSON showAllTables()
        @NFCore(documentation="Загрузить все колонки из таблицы в Базе данных")
    op JSON loadAllColumns()
        @NFCore(documentation="Запустить запрос к Базе данных")
    op JSON runQueryDataset(QueryParameter[] parameters)
}

@NFCore(documentation="Набор данных, без подключения к Базе данных")
class GroovyDataset extends Dataset {
        @NFCore(documentation="Исполняемый код на Groovy для запроса данных", expandable="true")
    String runQueryGroovyCode
        @NFCore(documentation="Исполняемый код на Groovy для создания колонок", expandable="true")
    String loadAllColumnGroovyCode
        @NFCore(documentation="Запуск кода из 'loadAllColumnGroovyCode'")
    op JSON loadAllColumns()
        @NFCore(documentation="Запуск кода из 'runQueryGroovyCode'")
    op JSON runQueryDataset(QueryParameter[] parameters)
}

@NFCore(documentation="Сводная таблица")
class Pivot {
}

@NFCore(documentation="Диаграмма")
class Diagram {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
    String diagramName
        @NFCore(documentation="Тип диаграммы: Line, Bar, Pie")
    DiagramType diagramType
        @NFCore(documentation="Подпись по горизонтали")
    String axisXLegend
        @NFCore(documentation="Подпись по вертикали")
    String axisYLegend
    AxisXPositionType axisXPosition
    AxisYPositionType axisYPosition
    LegendAnchorPositionType legendAnchorPosition
    String diagramLegend
    String indexBy
    String keyColumn
    String valueColumn
}

/*View*/
@NFCore(documentation="Обработанный (агрегированный) набор данных")
@Ecore(constraints="IsValid")
class DatasetComponent extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Владелец обработанного (агрегированного) набора данных")
    refers User owner
        @NFCore(documentation="Данные о создании и изменении объекта")
    contains Audit audit
        @NFCore(documentation="Права доступа. Варианты: Public, Private, Default")
    Access access
        @NFCore(documentation="Создание всех колонок из 'dataset'")
    op JSON createAllColumns()
        @NFCore(documentation="Удаление всех колонок")
    op JSON deleteAllColumns()
        @NFCore(documentation="Ссылка на Набор данных")
    refers Dataset dataset
        @NFCore(documentation="Колонки")
    contains DatasetColumnView[] column
        @NFCore(documentation="Запустить запрос к Базе данных")
    op JSON runQuery(QueryParameter[] parameters, QueryFilterDTO[] filters, QueryConditionDTO[] aggregations, QueryConditionDTO[] sorts, QueryFilterDTO[] groupBy, QueryConditionDTO[] calculatedExpression, QueryConditionDTO[] groupByColumn)
        @NFCore(documentation="Возвращает список функций для калькультора в зависимости от базы данных", invisible="true")
    op JSON getAllFunctions()
    contains QueryParameter[] serverParameters
        //Состав серверного фильтра
    contains QueryFilter[] serverFilter
    contains QueryAggregate[] serverAggregation
    contains QuerySort[] serverSort
    contains QueryGroupBy[] serverGroupBy
    contains QueryCalculatedExpression[] serverCalculatedExpression
    contains QueryGroupByColumn[] groupByColumn
    contains Highlight[] highlight
    contains Pivot[] pivot
    contains Diagram[] diagram
    contains HiddenColumn[] hiddenColumn
    contains DMLQuery insertQuery
    contains DMLQuery updateQuery
    contains DMLQuery deleteQuery
        @NFCore(invisible="true")
    op void executeInsert(QueryParameter[] parameters)
        @NFCore(invisible="true")
    op void executeUpdate(QueryParameter[] parameters)
        @NFCore(invisible="true")
    op void executeDelete(QueryParameter[] parameters)
}

@NFCore(documentation="")
class DMLQuery {
        @NFCore(expandable="true")
    String queryText
    boolean generateFromModel
}

@NFCore(documentation="")
class DatasetColumn {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
    String name
    String rdbmsDataType
    DataType convertDataType
}

@NFCore(documentation="Колонки")
abstract class DatasetColumnView {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
    String name
    contains Typography headerName //название столбца
        @NFCore(documentation="Скрыть/показать колонку")
    boolean hide
        @NFCore(documentation="Текст, отображаемый при наведении мыши на заголовок колонки")
    String headerTooltip
        @NFCore(documentation="Отображать текст из 'headerTooltip'")
    boolean showTooltipField
        @NFCore(documentation="Закрепить столбец. Варианты: Undefined, Left, Right")
    Pinned pinned
        @NFCore(documentation="Возможность изменения ширины колонки пользователем")
    boolean resizable
}

@NFCore(documentation="Подробное описание колонки")
class RdbmsColumn extends DatasetColumnView {
        @NFCore(documentation="Формат того, как отображаются данные (два знака после запятой, с точнок, как текст, как число...)")
    refers FormatMask formatMask
        @NFCore(documentation="Формат того, как выкачиваются данные в Excel (два знака после запятой, с точнок, как текст, как число...)")
    refers FormatMask excelFormatMask
        @NFCore(documentation="Если пришло значение null, то отображать 'defaultValue' в ячейке")
    String defaultValue
        @NFCore(documentation="Редактируемая колонка")
    boolean editable
        @NFCore(documentation="Определение первичного ключа для редактирования таблицы")
    boolean isPrimaryKey
        @NFCore(documentation="Выравнивание текста. Варианты: Undefined, Left, Right, Center")
    TextAlign textAlign
    String componentRenderCondition
        @NFCore(documentation="Интерфейс, которым помечаются классы, доступные для использования в таблицах, в строках с данными")
    contains GridComponent component
        @NFCore(documentation="Ссылка на соответствующую колонку из 'dataset'")
    refers DatasetColumn datasetColumn
}

@NFCore(documentation="")
class ColumnGroup extends DatasetColumnView {
    contains DatasetColumnView[] column
}

@NFCore(documentation="")
class FormatMask extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="")
    String value
    boolean isDynamic
}

@NFCore(documentation="")
class QueryParameter {
    String parameterName
    String parameterValue
    String parameterDataType = "String"
    //LocalDate format
    String parameterDateFormat = "yyyy-MM-dd"
    //LocalDateTime format
    String parameterTimestampFormat = "yyyy-MM-dd HH:mm:ss"
    boolean isPrimaryKey
}

@NFCore(documentation="")
class QueryFilter {
    String datasetColumn
    Operations operation
    String value
    boolean enable
}

@NFCore(documentation="")
class QueryAggregate {
    String datasetColumn
    Aggregate operation
    boolean enable
}

@NFCore(documentation="")
class QuerySort {
    String datasetColumn
    Sort operation
    boolean enable
}

@NFCore(documentation="")
class QueryGroupBy {
    String datasetColumn
    Aggregate operation
    boolean enable
    String value
}

@NFCore(documentation="")
class QueryGroupByColumn {
    String datasetColumn
    boolean enable
}

@NFCore(documentation="")
class QueryCalculatedExpression {
    String datasetColumn
    String operation
    String dataType
    String mask
    boolean enable
}

@NFCore(documentation="")
class HiddenColumn {
    String datasetColumn
    boolean enable
}

@NFCore(documentation="")
class QueryConditionDTO {
    String datasetColumn
    String operation
    boolean enable
}

@NFCore(documentation="")
class QueryFilterDTO extends QueryConditionDTO {
    String value
}

@NFCore(documentation="")
class Highlight {
    HighlightType highlightType
    String datasetColumn
    Operations operation
    String value
    boolean enable
    String backgroundColor
    String color
}

@NFCore(documentation="")
enum QueryType {
    UseTableName
    UseQuery
}

@NFCore(documentation="")
enum Operations {
    EqualTo
    NotEqual
    LessThan
    LessThenOrEqualTo
    GreaterThan
    GreaterThanOrEqualTo
    IsEmpty
    IsNotEmpty
    IncludeIn
    NotIncludeIn
    StartWith
    NotStartWith
    EndOn
    NotEndOn
}

@NFCore(documentation="")
enum Aggregate {
    Average
    Count
    CountDistinct
    Maximum
    Minimum
    Sum
}

@NFCore(documentation="")
enum Sort {
    FromAtoZ
    FromZtoA
}

@NFCore(documentation="")
enum Access {
    Public
    Private
    Default
}

@NFCore(documentation="")
enum Filter {
    TextColumnFilter
    NumberColumnFilter
    DateColumnFilter
}

@NFCore(documentation="")
enum Pinned {
    Undefined
    Left
    Right
}

@NFCore(documentation="")
enum TextAlign {
    Undefined
    Left
    Right
    Center
}

@NFCore(documentation="")
enum DataType {
    Undefined
    Boolean
    Date
    Decimal
    Integer
    String
    Timestamp
}

@NFCore(documentation="")
enum HighlightType {
    Cell
    Column
    Row
}

@NFCore(documentation="")
enum DiagramType {
    Line
    Bar
    Pie
}

@NFCore(documentation="")
enum LegendAnchorPositionType {
    TopLeft
    Top
    TopRight
    Left
    Center
    Right
    BottomLeft
    Bottom
    BottomRight
}

@NFCore(documentation="")
enum AxisXPositionType {
    Top
    Bottom
}

@NFCore(documentation="")
enum AxisYPositionType {
    Left
    Right
}

@NFCore(documentation="Функции для калькулятора")
enum CalculatorFunction {
    abs as "abs(<column>)"
    mod as "mod(<column1>,<column2>)"
    power as "power(<column>,<expression>)"
    sqrt as "sqrt(<column>)"
    ascii as "ascii(<column>)"
    pi as "pi()"
    exp as "exp(<column>)"
    sign as "sign(<column>)"
    cos as "cos(<column>)"
    sin as "sin(<column>)"
    tan as "tan(<column>)"
    acos as "acos(<column>)"
    asin as "asin(<column>)"
    atan as "atan(<column>)"
    log10 as "log10(<column>)"
    ceiling as "ceiling(<column>)"
    floor as "floor(<column>)"
    coalesce as "coalesce(<column1>,<column2>,<columnN>)"
    concat as "concat(<column1>,<column2>)"
    curdate as "curdate()"
    curtime as "curtime()"
    year as "year(<column>)"
    month as "month(<column>)"
    day as "day(<column>)"
    hour as "hour(<column>)"
    minute as "minute(<column>)"
    second as "second(<column>)"
    nullif as "nullif(<column>,<expression>)"
    ltrim as "ltrim(<column>,<expression>)"
    rtrim as "rtrim(<column>,<expression>)"
    replace as "replace(<column>,<replacee>,<replacement>)"
    substring as "substring(<column>,<start>,<end>)"
    lower as "lower(<column>)"
    upper as "upper(<column>)"
    length as "length(<column>)"
    to_date as "to_date(<column>,?<format>)"
    to_char as "to_char(<column>,?<format>)"
    to_number as "to_number(<column>,?<format>)"
    case_ as "case"
    when_ as "when"
    then_ as "then"
    end_ as "end"
    and_ as "and"
    or_ as "or"
    notEqual as  "!="
    equal as  "="
    greater as ">"
    lesser as "<"
    greaterEqual as ">="
    lesserEqual as "<="
}