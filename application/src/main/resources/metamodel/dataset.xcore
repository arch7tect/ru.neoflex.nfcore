@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.datasource/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.dataset
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.auth.Audit
import ru.neoflex.nfcore.base.auth.User
import ru.neoflex.nfcore.application.Typography

/*JdbcDriver*/
@Ecore(constraints="IsValid")
class JdbcDriver {
    QName name
    String driverClassName
	String[] extLibraries /*доп. jar файлы*/
	String urlPattern
}

/*JdbcConnection*/
@Ecore(constraints="IsValid")
class JdbcConnection {
    QName name
    refers JdbcDriver driver
    String url
    String userName
    Password password
}

/*Dataset*/
abstract class Dataset {
    QName name
    op JSON deleteAllColumns()
    op JSON loadAllColumns()
    op JSON runQueryDataset()
    contains DatasetColumn[] datasetColumn
}

@Ecore(constraints="IsValid")
class JdbcDataset extends Dataset {
    refers JdbcConnection connection
    QueryType queryType
    Text query //тут, так как для каждого dataset своя валидаия
    Text schemaName
    Text tableName
    op JSON showAllTables()
}

/*View*/
class DatasetComponent {
     QName name //default сделать по умолчанию (не редактируемый)
     refers User owner
     contains Audit audit // createdBy + created(time) + modifiedBy + modified(time)
     Access access //Публичный, закрытый доступ
     op JSON createAllColumns()
     op JSON deleteAllColumns()
     boolean firstCheckBoxColumn //есть ли в первом столбце в гриде столбец с чекбоксами или его нет
     refers Dataset dataset
     contains DatasetColumnView[] column
     op JSON runQuery(ConditionDTO[] conditions, AggregationDTO[] aggregations, QuerySortDTO[] sorts)
     boolean useServerFilter
     //Состав серверного фильтра
     contains Condition[] serverFilter
     contains Aggregation[] serverAggregation
     contains QuerySort[] serverSort
     contains Highlight[] highlight
}

class DatasetColumn {
    String name
    String rdbmsDataType
    DataType convertDataType
}

abstract class DatasetColumnView {
    String name
    contains Typography headerName //название столбца
    refers FormatMask formatMask//Формат того, как отображаются данные (два знака после запятой, с точнок, как текст, как число...)
    String headerTooltip
    boolean hide
    Pinned pinned = "Undefined"
    Filter filter = "TextColumnFilter"
    Sort sort //тип клиентской сортировки
    String defaultValue //Если пришло значение null, то что отображать в ячейке
    Aggregate aggregate //Посчитать столбец (сумму, количество, вычислить максимальное значение)
    boolean editable
    boolean checkboxSelection
    boolean sortable
    boolean suppressMenu
    boolean resizable
}

class RdbmsColumn extends DatasetColumnView {
    refers DatasetColumn datasetColumn
}

class CustomColumn extends DatasetColumnView {
    String customColumnExpression //выражение в вычисляемом столбце
}

class FormatMask {
    QName name
    String value // ( p.5 234.10 || 5 234.10 || 5 234.1000 || 5 234)
}

class Condition {
    refers DatasetColumn datasetColumn
    Operations operation
    String value
    boolean enable
}

class ConditionDTO {
    String datasetColumn
    String operation
    String value
    boolean enable
}

class Highlight {
    HighlightType highlightType
    refers DatasetColumn datasetColumn
    Operations operation
    String value
    boolean enable
    String backgroundColor
    String color
}

class Aggregation {
    refers DatasetColumn datasetColumn
    Aggregate operation
    boolean enable
}

class AggregationDTO {
    String datasetColumn
    String operation
    boolean enable
}

class QuerySort {
    refers DatasetColumn datasetColumn
    Sort operation
    boolean enable
}

class QuerySortDTO {
    String datasetColumn
    String operation
    boolean enable
}

enum QueryType {
    UseTableName
    UseQuery
}

enum Operations {
    EqualTo
    NotEqual
    LessThan
    LessThenOrEqualTo
    GreaterThan
    GreaterThanOrEqualTo
    IsEmpty
    IsNotEmpty
    IncludeIn
    NotIncludeIn
    StartWith
    NotStartWith
    EndOn
    NotEndOn
}

enum Aggregate {
    Average
    Count
    CountDistinct
    Maximum
    Median
    Minimum
    Sum
}

enum Sort {
    FromAtoZ
    FromZtoA
}

enum Access {
    Public
    Private
    Default
}

enum Filter {
    TextColumnFilter
    NumberColumnFilter
    DateColumnFilter
}

enum Pinned {
    Undefined
    Left
    Right
}

enum DataType {
    Undefined
    Boolean
    Date
    Decimal
    Integer
    String
    Timestamp
}

enum HighlightType {
    Cell
    Column
    Row
}

