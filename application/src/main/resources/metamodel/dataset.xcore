@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.datasource/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.dataset
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.auth.Audit
import ru.neoflex.nfcore.application.Typography

/*Driver*/
@Ecore(constraints="IsValid")
class JdbcDriver {
    QName name
    String driverClassName
	String[] extLibraries /*доп. jar файлы*/
	String urlPattern
}

/*Connection*/
@Ecore(constraints="IsValid")
class JdbcConnection {
    QName name
    refers JdbcDriver driver
    String url
    String userName
    Password password
}

/*Dataset*/
abstract class Dataset {
    QName name
    Text query
    op JSON runQuery() //Запуск query. При запуске runQuery будут начитываться все уникальные значения в каждом столбце и возвращаться (для фильтров)
    contains DatasetColumn[] datasetColumn
}

@Ecore(constraints="IsValid")
class JdbcDataset extends Dataset {
    refers JdbcConnection connection
}

/*Dataset Settings*/
abstract class DatasetSettings {
     QName name //default сделать по умолчанию (не редактируемый)
     contains Audit audit // createdBy + created(time) + modifiedBy + modified(time)
     Access access //Публичный, закрытый доступ
     //Созать все колонки в DatasetSettings, которые есть в Dataset. В параметрах (можно удалить все имеющиеся перед добавлением новых)
     op JSON createAllColumns(boolean deleteAllColumns)
     boolean endCheckBoxColumn //есть ли в последнем столбце в гриде столбец с чекбоксами или его нет
     refers Dataset dataset
     contains DatasetColumnView[] column
}

class DatasetSettingsGrid extends DatasetSettings {
     String rowCount//сколько строк показывать (выбрать из списка)
     contains Highlight[] highlight//При условии таком-то, строки заливаются таким-то цветом
     Theme theme //Выбранная тема грида
     boolean showUniqRow//Показывать только уникальные строки
     contains Conditions[] serverFilter //Состав серверного фильтра
     String clientFilterExpression //выражение в клиентском фильтре
}

class DatasetSettingsPivot extends DatasetSettings {
}

class DatasetSettingsDiagram extends DatasetSettings {
}

class Highlight {
    QName name
    HighlightType highlightType
    Colors backgroundColor
    Colors textColor
    refers DatasetColumnView datasetColumnView
    Operations operation
    String value
}

/*Dataset Columns*/
class DatasetColumn {  //не редактирумый класс, информативный. Отвечает на вопрос: что пришло с сервера?
    String name //rdbmsFieldName название поля с сервера
    String rdbmsDataType //тип, который приходит с сервера (не измененный)
    DataType convertDataType //rdbmsDataType преобразованный в какой-то из enum DataType
}

abstract class DatasetColumnView {
    QName name
    contains Typography headerName //название столбца
    refers FormatMask formatMask//Формат того, как отображаются данные (два знака после запятой, с точнок, как текст, как число...)
    String headerTooltip //всплывающая подсказка
    boolean hide //скрытый ли столбец. По умолчанию false
    Pinned pinned //зафиксированный ли столбец (слева, справа)
    Filter filter //выбор типа фильтра клиентского на столбце. Зависит от типа данных, но можно изменить.
    Sort sort //тип клиентской сортировки
    String defaultValue //Если пришло значение null, то что отображать в ячейке
    Aggregate aggregate //Посчитать столбец (сумму, количество, вычислить максимальное значение)
}

class RdbmsColumn extends DatasetColumnView {
    refers DatasetColumn datasetColumn
}

class CustomColumn extends DatasetColumnView {
    String customColumnExpression //выражение в вычисляемом столбце
}

class FormatMask {
    QName name
    String value // ( p.5 234.10 || 5 234.10 || 5 234.1000 || 5 234)
}

class Conditions {
    String name
    refers DatasetColumn datasetColumn //в списке все столбцы только из dataset
    Operations operation
    String value
}

enum HighlightType {
    row
    column
}

enum Colors {
    undefined
    yellow
    green
    blue
    orange
    red
}

enum Operations {
    equal
    notEqual
    greaterThan
    lessThan
    greaterThenOrEqual
    lessThenOrEqual
}

enum Theme {
    balham
    material
    fresh
    blue
    bootstrap
}

enum Aggregate {
    undefined
    sum
    average
    count
    countDistinct
    minimum
    maximum
    median
}

enum Sort {
    undefined
    from_A_to_Z
    from_Z_to_A
}

enum Access {
    public //A Number Filter for number comparisons.
    private //A Text Filter for string comparisons.
}

enum Filter {
    textColumnFilter //A Text Filter for string comparisons.
    numberColumnFilter //A Number Filter for number comparisons.
    dateColumnFilter //A Date Filter for date comparisons.
}

enum Pinned {
    undefined
    left
    right
}

enum DataType {
    undefined
    string
    boolean
    date
    timestamp
    integer
    decimal
}
